using System;
using System.Globalization;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace Experiment.CUI
{
    internal static class AnalyzePerformance
    {

        private static readonly ReadOnlyMemory<uint>[] _longValues;

        static AnalyzePerformance()
        {
            var _longValueTexts = new[]
            {
                "41857752287684879351744317609912101746561440370789298575529535321572114663295923036794912666801133380421670333515366337884839650431835566980753670017511281283698293718552897055809223211387665877981966852224992138738344322987142682356162632544314582534007049246276641129548526433180542316692954342987059073934448321740153190195495602025976737189605680527165349736225592381228360759288226272430396580710224477001203744028902203754667592635928610536024228288916649410376864115041934623283940677409731893734615372295267522803247195925127438923924712934475631130499314131047617969084397135005065806535684137353895123149689610971565267993434869101102799301454258502413462026704002853632717515829724108821136699497684032251757516119283901930391013932904639808682386413891091374618733551042273879312661152781395234336227201059361993468668051007879986321759318959284469681593714311108153289164713998403155676280813833229863528613927004857372528554615310303510193289502464275293419833869688097466071867595383296993174990126093774838858475331613180906158412218745084074717978316347614047961150167646760515155049993050877631901261155127378359835116331736142467228683953270823573134548023208533268756411642765240890220560902400270468692027758645",
                "214622363451474679261921887226371233785245019074289029400132390587602656821943268385921112818169504617043570071559693945269637173481785651440122021114845416013599282047399498351256993712577742842949363205377047602141338759774472809340297908339375780078563125068867978979125084594637487972004667127465131884406821199366887562998538662992543027604926722502887856495301668463974868470230401790584045626083526240363846986817073918924876424791777653770600059870949985366696894948170274765842231328281978148821954818243404481809594954415010023617254933075652530394731703785750581400508099331925409953501378354300196932074419646129016677736851670535227966143778837138265638028903908715334477834907625126986534186066457381223577344644898360149953547901687354617315939938025191351763523126328732641805517018111251770961027399355213197394449579214238342029872799906332630390092080671942695622365227504364765217908676015968790165944978072612861601655538462908919729499109155804404429245272401652436997148669050396648692414236738678896818682891518094239227868220235627002932466244479529837641161699774102347036075666064942414544629236974765953193550938127601891959596076749996136974601747835140920725132184409808348173897666900918001257359862100",
                "378178902095678047336684850439683922018792401711365128854948345759830519330715428040658136211318945196696167676164114532326790067642898078100641158790764723713244215295667783917142517844870741196421880681399275091489028786336773917823300642504034451554848370465949213541446597636597292765500208655435928516758374943311028880385016975050566958111763485401370821035173224509283096642026240622804663114589769206130273377873531306204117205319207083474927966648256158631112888541504279114577832780540028001315027381356097903018147379080006209739710263647812519774099265925463756466919605504967708195471781454316055788887532699181084740102161566588992820733116251479974053814454122008391844290757069899246575125232149888290390055928051528665324907716985404927731656983572705443634512925403316229692414075961235992166364937988655884116083082510229268835798450318912004359246371345535045549953941056411038561651859721406831221530246241317325258967505307338971400287801203878377195232107272917062393134561125086941394705030307561244336691712298245527859321571241030600387163854439649410500841743611622966583708777516936636830688138080307314986575973787651805701050826858088610644270431214168020092819317277150379231460776426579890683699872392",
                "583385605572858865999828231183515952051492074390592174852069644674214218778952494094915475010441227963075138340077295160538946476442179115027615410959857176319188763667676581581650224369425324433567228007798090021845414822468095143314731375733794797547226130038611976379289182345303061894291451386000902574363025517652518795943605782552612452941289797436751695515274227866228552919721035651752050836968852873095171201323481187574722445862757023333297713112858733735173711026545236238572846140086841086274373398319319043266323520762679772697787062124387246984340351183411614055229641458387581583649911571017614372372143506645267100600275834426514220122441395117247404401017570319752435275452268514222168640680230759194025157479229436848342447349233901949411517610310686672673629672075433163867404831053151498089942010438614726504392606978822951133141864930836418135073565057386655049650514501673142810228824147183832298866217916242729296300141259498681940338753251158985314521333806299420439802691816136643778749478793974224057885011880221507328626780404343672550837458950744422232299767881233289054641581721397633041812138203429627459492259261523303878746559675484347312942879705284460312201890959480153628964265865063283977403885898",
                "651003956922181170346454262182515895192134953932403507427759561926283964694459832264694814234825564255254426260357470882380960461813377167964860635701850560287068864694752112850144493494554781634863507406723361932017602526462358230269219670352835979758454411542804856304849827480529492042638782926152455346981291463298074667216715185465555714186717400344452165686495128401539803314308217424197726259858081531457321104582668382372044082282861335774524652210490394123696189221553422940973175179105982601702533739337084345463992279475743252540824113549179628756593283773768561267108841443109022638161166186171314928268007156392034644058018546729148288590143447436568744926150995792117676545767106209141926658435948471848518892336897714730921142938923754943632321934593160020768505343621919357217912165293004615428898221095533145964620872438629617762610075791060536837040642507115621167125686492694108163871831217544294481877861985298997910285915988626490703512557876970957223923869540471156647149656352885566298085279671934206526826941859226795344227508942774276208765479261232871158018783788919202511423608603871093292963492701169580801853611301886818311921542834108874508716676391139081677967595711677986588782021883877089743001985066",
                "674622437753008891579402691916867025067968850599256663114786910548897693642104334233875056664303327320541139800984811754605429708914609585140830309413388030827702315656929090383508358416538514014805464157489954819657052548754917597765051319594420787756030135419603619852050662614273933482455798073231575326322559440801711261142895203228676748605102260144389407653860314285746722716592014920471282287294523203945052842357079299786109780919987496445533830067318556199150201717980044671248409718431707158141940558934354443149077230752984948802904389067069942077288062924747354960450310757667319424466590018192094701797989601148901314252170709282775682531869061395987600438189149440562797540430534247085832658137732500502702370486167878100791696886677025353333539169805185319191558066184050967039509520339970314932609528683115891681893917010859210300444873685389436654125111719856452641143903708491105876395070937804437157191077759704708384470872842219576214272667274973847831989081085187470853746093957197695197193712051993211149355165775196018364159034921908564488631151294323553183452126817061581277931712141552730444141543003748253084984363493520403831052534311511626170915604384290531136197605463841992665468851485602294346808839972",
                "683604520902669821992862091518349198775903815429794293966012109279118920193903549158792229348430845191181398086578240330151192125907910510513167352015845393791345092698698883854058477312924893487390888342348998883607105220302770025787638242221643663183312748347317853791935035725020903105897534839316836783593078081835035592476989637033192967707906974935156959039768774131706493682244527341305747439506109349876479474746095145639896565951339280969586081654396035054857298721435644105034303724155296164741620812291348092440913335644478832740244359103680589531945403222833643132088048883911561417262230875469885123960572642745320640114633200245975551755552775987252707910027544731263260606271453052714948377159390425025098185901420789271483873342338891018070841152859249214624876845365173881331646753416510052975134614625161007932826117530557926721652182832646670456360274797784545082823115764529279416563528562165447625324090092686270498537442201499286068210580454833403268833645890769778321651435012403638709723872339175386593564010739282251749182316781834175934411532451507352950258994898862149252474093345885358600705520537310003385430970879803878051212650249968315668591770641970403605233905463240994520265526250420059849330364559",
                "829922601453972483416338249711429432511550474474126608625617088420965448949831375648538406400424550253893037070155010841440542896578420311757239570155728282927019244483388386248568346329761332162794018643715517923629028178744208559776604986969917951819331279394583407724472689873002782326701885075293542318630008735864109510993386169534316975632742009572061450521001319707302680652577400919826573341501849128624825518867317273249055979827355263031572373707421164625217843469561180513527114322315641587300066006578288471301215029459745589966204531734859885619739448171587677228188078108078585989760562705129923855905055854141839015567585876375368349384402671296589698610622431568782810743405616834495475215301304469262085719743132840948328793875016995882196042433054779037482372533195170272886316557894959405607372466099137532517584551517308860045480334452340003521055297405251737337707073657636561799436822471349415761026402430856033570454703110283317390840791992904864859679103033526300999622880599107637111211039284013770402514129632348340364785204543460689047724635867329280049446976831631465901631390030002628678531014028863229200288838782976289929418749897688765068787188735197462136315556665054254980756610235634255701314249671",
            };

            _longValues = [.. _longValueTexts.Select(text => BigInteger.Parse(text, NumberStyles.None, CultureInfo.InvariantCulture)).OrderByDescending(value => value).Select(value => value.ToUInt32Array())];
        }

        public static void AnalyzeGcd()
        {
            const long LOOP_COUNT = 10000;
            Span<uint> result = stackalloc uint[_longValues.Max(value => value.Length)];

            for (var index1 = 0; index1 < _longValues.Length - 1; ++index1)
            {
                for (var index2 = index1 + 1; index2 < _longValues.Length; ++index2)
                {
                    for (var count = index2 + 1; count < LOOP_COUNT; ++count)
                    {
                        Gcd(_longValues[index1].Span, _longValues[index2].Span, result);
                    }
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            static void Gcd(ReadOnlySpan<uint> left, ReadOnlySpan<uint> right, Span<uint> result)
            {
                BigIntegerCalculatorVer2_1.Gcd(left, right, result);
            }
        }

        public static void AnalyzeShiftRight()
        {
            const long LOOP_COUNT = 100000;

            for (var index = 0; index < _longValues.Length; ++index)
            {
                var value = _longValues[index].Span;
                for (var count = 0L; count < LOOP_COUNT; ++count)
                {
                    HeavyTask1(value);
                    HeavyTask2(value);
                    HeavyTask5(value);
                    HeavyTask6(value);
                    HeavyTask6(value);
                    HeavyTask5(value);
                    HeavyTask4(value);
                    HeavyTask3(value);
                    HeavyTask2(value);
                    HeavyTask1(value);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            static void HeavyTask1(ReadOnlySpan<uint> value)
            {
                Span<uint> buffer = stackalloc uint[value.Length];
                for (var bitCount = 0; bitCount <= 64; ++bitCount)
                {
                    value.CopyTo(buffer);
                    BigIntegerCalculatorVer2_1.TryToShiftRight(0, buffer, bitCount);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            static void HeavyTask2(ReadOnlySpan<uint> value)
            {
                Span<uint> buffer = stackalloc uint[value.Length];
                for (var bitCount = 0; bitCount <= 64; ++bitCount)
                {
                    value.CopyTo(buffer);
                    BigIntegerCalculatorVer2_1.TryToShiftRight(1, buffer, bitCount);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            static void HeavyTask3(ReadOnlySpan<uint> value)
            {
                Span<uint> buffer = stackalloc uint[value.Length];
                for (var bitCount = 0; bitCount <= 64; ++bitCount)
                {
                    value.CopyTo(buffer);
                    BigIntegerCalculatorVer2_1.TryToShiftRight(2, buffer, bitCount);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            static void HeavyTask4(ReadOnlySpan<uint> value)
            {
                Span<uint> buffer = stackalloc uint[value.Length];
                for (var bitCount = 0; bitCount <= 64; ++bitCount)
                {
                    value.CopyTo(buffer);
                    BigIntegerCalculatorVer2_1.TryToShiftRight(3, buffer, bitCount);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            static void HeavyTask5(ReadOnlySpan<uint> value)
            {
                Span<uint> buffer = stackalloc uint[value.Length];
                for (var bitCount = 0; bitCount <= 64; ++bitCount)
                {
                    value.CopyTo(buffer);
                    BigIntegerCalculatorVer2_1.TryToShiftRight(4, buffer, bitCount);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            static void HeavyTask6(ReadOnlySpan<uint> value)
            {
                Span<uint> buffer = stackalloc uint[value.Length];
                for (var bitCount = 0; bitCount <= 64; ++bitCount)
                {
                    value.CopyTo(buffer);
                    BigIntegerCalculatorVer2_1.TryToShiftRight(5, buffer, bitCount);
                }
            }
        }
    }
}
