using System;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace SourceCodeGenerator
{
    internal static class Program
    {
        private static void Main()
        {
            var baseDirectoryPath = new FileInfo(typeof(Program).Assembly.Location).Directory?.Parent?.Parent?.Parent?.Parent ?? throw new Exception();
            if (baseDirectoryPath.Name != "Experiment.GreatestCommonDivisor")
                throw new Exception();

            GenerateBigIntegerCalculatorVer2_1(Path.Combine(baseDirectoryPath.FullName, "Experiment.CUI"));

            GenerateBenchmarkOfGcd(Path.Combine(baseDirectoryPath.FullName, "Experiment.CUI"));

            GenerateBenchmarkOfShiftRight(Path.Combine(baseDirectoryPath.FullName, "Experiment.CUI"));

            Console.WriteLine("Completed.");
            Console.Beep();
            _ = Console.ReadLine();
        }

        private static void GenerateBigIntegerCalculatorVer2_1(string coreProjectPath)
        {
            var outputPath = Path.Combine(coreProjectPath, "BigIntegerCalculatorVer2_1.AutoGenerated.cs");
            if (File.Exists(outputPath))
            {
                var outputFileAttribute = File.GetAttributes(outputPath);
                File.SetAttributes(outputPath, outputFileAttribute & ~FileAttributes.ReadOnly);
            }

            try
            {
                using var sourceWriter = new StreamWriter(outputPath, false, Encoding.UTF8);
                sourceWriter.WriteLine("using System;");
                sourceWriter.WriteLine("using System.Numerics;");
                sourceWriter.WriteLine("using System.Runtime.CompilerServices;");
                sourceWriter.WriteLine("using System.Runtime.InteropServices;");
                sourceWriter.WriteLine("using System.Runtime.Intrinsics;");
                sourceWriter.WriteLine("using System.Runtime.Intrinsics.Arm;");
                sourceWriter.WriteLine("using System.Runtime.Intrinsics.Wasm;");
                sourceWriter.WriteLine("using System.Runtime.Intrinsics.X86;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("namespace Experiment.CUI");
                sourceWriter.WriteLine("{");
                sourceWriter.WriteLine("    internal static partial class BigIntegerCalculatorVer2_1");
                sourceWriter.WriteLine("    {");
                WriteShiftRightTry1(sourceWriter);
                sourceWriter.WriteLine();
                WriteShiftRightTry2(sourceWriter);
                sourceWriter.WriteLine();
                WriteSubtractSelfTry1(sourceWriter);
                sourceWriter.WriteLine();
                WriteSubtractSelfTry2(sourceWriter);
                sourceWriter.WriteLine("    }");
                sourceWriter.WriteLine("}");
            }
            finally
            {
                var outputFileAttribute = File.GetAttributes(outputPath);
                File.SetAttributes(outputPath, outputFileAttribute | FileAttributes.ReadOnly);
            }

            static void WriteShiftRightTry1(TextWriter sourceWriter)
            {
                sourceWriter.WriteLine("        #region ShiftRightTry1");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("        private static void ShiftRightTry1(Span<uint> value, int bitCount)");
                sourceWriter.WriteLine("        {");
                sourceWriter.WriteLine("            Assert(value.Length > 0);");
                sourceWriter.WriteLine("            Assert(bitCount >= 0);");
                sourceWriter.WriteLine("            Assert(bitCount <= value.Length * _BIT_COUNT_PER_UINT32);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (bitCount == 0)");
                sourceWriter.WriteLine("                return;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            var offset = bitCount >> _SHIFT_BIT_COUNT_PER_UINT32;");
                sourceWriter.WriteLine("            var rightShiftCount = bitCount & _BIT_COUNT_MASK_FOR_UINT32;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (rightShiftCount == 0)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                // value[0] = value[offset + 0];");
                sourceWriter.WriteLine("                // value[1] = value[offset + 1];");
                sourceWriter.WriteLine("                // ...");
                sourceWriter.WriteLine("                // value[index] = value[index + offset];");
                sourceWriter.WriteLine("                // ...");
                sourceWriter.WriteLine("                // value[value.Length - offset - 2] = value[value.Length - 2];");
                sourceWriter.WriteLine("                // value[value.Length - offset - 1] = value[value.Length - 1];");
                sourceWriter.WriteLine("                // value[value.Length - offset] = 0;");
                sourceWriter.WriteLine("                // ...");
                sourceWriter.WriteLine("                // value[value.Length - 1] = 0;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                Assert(offset > 0);");
                sourceWriter.WriteLine("                Assert(offset <= value.Length);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                value[offset..].CopyTo(value[..^offset]);");
                sourceWriter.WriteLine("                value[^offset..].Clear();");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine("            else");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                var leftShiftCount = _BIT_COUNT_PER_UINT32 - rightShiftCount;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                Assert(offset >= 0);");
                sourceWriter.WriteLine("                Assert(offset < value.Length);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                // value[0] = (value[offset + 0] >> rightShiftCount) | (value[offset + 1] << leftShiftCount);");
                sourceWriter.WriteLine("                // value[1] = (value[offset + 1] >> rightShiftCount) | (value[offset + 2] << leftShiftCount);");
                sourceWriter.WriteLine("                // ...");
                sourceWriter.WriteLine("                // value[index] = (value[index + offset] >> rightShiftCount) | (value[index + offset + 1] << leftShiftCount);");
                sourceWriter.WriteLine("                // ...");
                sourceWriter.WriteLine("                // value[value.Length - offset - 2] = (value[value.Length - 2] >> rightShiftCount) | (value[value.Length - 1] << leftShiftCount);");
                sourceWriter.WriteLine("                // value[value.Length - offset - 1] = value[value.Length - 1] >> rightShiftCount;");
                sourceWriter.WriteLine("                // value[value.Length - offset] = 0;");
                sourceWriter.WriteLine("                // ...");
                sourceWriter.WriteLine("                // value[value.Length - 1] = 0;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                var index = 0;");
                sourceWriter.WriteLine("                var sourceIndex = offset;");
                sourceWriter.WriteLine("                var count = value.Length - offset - 1;");
                sourceWriter.WriteLine("                var lowBits = value[sourceIndex++] >> rightShiftCount;");
                sourceWriter.WriteLine("                while (count >= 2)");
                WriteInternalStatements(sourceWriter, 2);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count > 0)");
                sourceWriter.WriteLine("                {");
                sourceWriter.WriteLine("                    var nextBits = (ulong)value[sourceIndex++] << leftShiftCount;");
                sourceWriter.WriteLine("                    value[index++] = lowBits | (uint)nextBits;");
                sourceWriter.WriteLine("                    lowBits = (uint)(nextBits >> _BIT_COUNT_PER_UINT32);");
                sourceWriter.WriteLine("                    --count;");
                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                Assert(count == 0);");
                sourceWriter.WriteLine("                Assert(index == value.Length - offset - 1);");
                sourceWriter.WriteLine("                Assert(sourceIndex == value.Length);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                value[index] = lowBits;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                value[^offset..].Clear();");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine("        }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("        #endregion");

                static void WriteInternalStatements(TextWriter sourceWriter, int n)
                {
                    sourceWriter.WriteLine($"                {{");
                    for (var count = 0; count < n / 2; ++count)
                    {
                        sourceWriter.WriteLine($"                    {(count == 0 ? "var " : "")}nextBits1 = (ulong)value[sourceIndex + {2 * count + 0}] << leftShiftCount;");
                        sourceWriter.WriteLine($"                    value[index + {2 * count + 0}] = {(count == 0 ? "lowBits" : "(uint)(nextBits2 >> _BIT_COUNT_PER_UINT32)")} | (uint)nextBits1;");
                        sourceWriter.WriteLine($"                    {(count == 0 ? "var " : "")}nextBits2 = (ulong)value[sourceIndex + {2 * count + 1}] << leftShiftCount;");
                        sourceWriter.WriteLine($"                    value[index + {2 * count + 1}] = (uint)(nextBits1 >> _BIT_COUNT_PER_UINT32) | (uint)nextBits2;");
                    }

                    sourceWriter.WriteLine($"                    lowBits = (uint)(nextBits2 >> _BIT_COUNT_PER_UINT32);");
                    sourceWriter.WriteLine($"                    index += {n};");
                    sourceWriter.WriteLine($"                    sourceIndex += {n};");
                    sourceWriter.WriteLine($"                    count -= {n};");
                    sourceWriter.WriteLine($"                }}");
                }
            }

            static void WriteShiftRightTry2(TextWriter sourceWriter)
            {
                sourceWriter.WriteLine("        #region ShiftRightTry2");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("        private static void ShiftRightTry2(Span<uint> value, int bitCount, HardwareAcceleratorOption accelerator = HardwareAcceleratorOption.ByDefault)");
                sourceWriter.WriteLine("        {");
                sourceWriter.WriteLine("            var offset = bitCount >> _SHIFT_BIT_COUNT_PER_UINT32;");
                sourceWriter.WriteLine("            var rightShiftCount = bitCount & _BIT_COUNT_MASK_FOR_UINT32;");
                sourceWriter.WriteLine("            if (rightShiftCount == 0)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                value[offset..].CopyTo(value[..^offset]);");
                sourceWriter.WriteLine("                value[^offset..].Clear();");
                sourceWriter.WriteLine("                return;");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            unsafe");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                fixed (uint* buffer = value)");
                sourceWriter.WriteLine("                {");
                sourceWriter.WriteLine("                    if ((accelerator & HardwareAcceleratorOption.UseVector512IfPossible) != HardwareAcceleratorOption.None)");
                sourceWriter.WriteLine("                    {");
                sourceWriter.WriteLine("                        if (Avx512F.IsSupported)");
                sourceWriter.WriteLine("                        {");
                sourceWriter.WriteLine("                            Finish(OperateVectorByAvx512F(buffer + offset, buffer, value.Length - offset, rightShiftCount), buffer, value.Length);");
                sourceWriter.WriteLine("                            return;");
                sourceWriter.WriteLine("                        }");
                sourceWriter.WriteLine("                    }");
                sourceWriter.WriteLine("");
                sourceWriter.WriteLine("                    if ((accelerator & HardwareAcceleratorOption.UseVector256IfPossible) != HardwareAcceleratorOption.None)");
                sourceWriter.WriteLine("                    {");
                sourceWriter.WriteLine("                        if (Avx2.IsSupported)");
                sourceWriter.WriteLine("                        {");
                sourceWriter.WriteLine("                            Finish(OperateVectorByAvx2(buffer + offset, buffer, value.Length - offset, rightShiftCount), buffer, value.Length);");
                sourceWriter.WriteLine("                            return;");
                sourceWriter.WriteLine("                        }");
                sourceWriter.WriteLine("                    }");
                sourceWriter.WriteLine("");
                sourceWriter.WriteLine("                    if ((accelerator & HardwareAcceleratorOption.UseVector128IfPossible) != HardwareAcceleratorOption.None)");
                sourceWriter.WriteLine("                    {");
                sourceWriter.WriteLine("                        if (Sse2.IsSupported)");
                sourceWriter.WriteLine("                        {");
                sourceWriter.WriteLine("                            Finish(OperateVectorBySse2(buffer + offset, buffer, value.Length - offset, rightShiftCount), buffer, value.Length);");
                sourceWriter.WriteLine("                            return;");
                sourceWriter.WriteLine("                        }");
                sourceWriter.WriteLine("                        else if (AdvSimd.IsSupported)");
                sourceWriter.WriteLine("                        {");
                sourceWriter.WriteLine("                            Finish(OperateVectorByAdvSimd(buffer + offset, buffer, value.Length - offset, rightShiftCount), buffer, value.Length);");
                sourceWriter.WriteLine("                            return;");
                sourceWriter.WriteLine("                        }");
                sourceWriter.WriteLine("                        else if (PackedSimd.IsSupported)");
                sourceWriter.WriteLine("                        {");
                sourceWriter.WriteLine("                            Finish(OperateVectorByPackedSimd(buffer + offset, buffer, value.Length - offset, rightShiftCount), buffer, value.Length);");
                sourceWriter.WriteLine("                            return;");
                sourceWriter.WriteLine("                        }");
                sourceWriter.WriteLine("                    }");
                sourceWriter.WriteLine("");
                sourceWriter.WriteLine("                    Finish(ShiftRightByDefault(buffer + offset, buffer, value.Length - offset, rightShiftCount), buffer, value.Length);");
                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            [MethodImpl(MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("            static unsafe byte* OperateVectorByAvx512F(uint* sp, uint* dp, int length, int rightShiftCount)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                Assert(Avx512F.IsSupported == true);");
                sourceWriter.WriteLine("                Assert(length > 0);");
                sourceWriter.WriteLine("                Assert(rightShiftCount is >= 1 and <= 31);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                var leftShiftCount = _BIT_COUNT_PER_UINT32 - rightShiftCount;");
                sourceWriter.WriteLine("                var count = length - 1;");
                sourceWriter.WriteLine("                switch (rightShiftCount)");
                sourceWriter.WriteLine("                {");
                for (var rightShiftCount = 1; rightShiftCount <= 31; ++rightShiftCount)
                {
                    var leftShiftCount = 32 - rightShiftCount;
                    sourceWriter.WriteLine($"                    case {rightShiftCount}:");
                    if (rightShiftCount == 31)
                        sourceWriter.WriteLine("                    default:");
                    if (rightShiftCount == 8)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 1, byteLength - 1);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 1;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else if (rightShiftCount == 16)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 2, byteLength - 2);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 2;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else if (rightShiftCount == 24)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 3, byteLength - 3);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 3;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else
                    {
                        sourceWriter.WriteLine($"                        while (count >= Vector512<uint>.Count)");
                        sourceWriter.WriteLine($"                        {{");
                        sourceWriter.WriteLine($"                            var lowPart = Avx512F.ShiftRightLogical(Avx512F.LoadVector512(sp), {rightShiftCount});");
                        sourceWriter.WriteLine($"                            var highPart = Avx512F.ShiftLeftLogical(Avx512F.LoadVector512(sp + 1), {leftShiftCount});");
                        sourceWriter.WriteLine($"                            Avx512F.Store(dp, Avx512F.Or(lowPart, highPart));");
                        sourceWriter.WriteLine($"                            sp += Vector512<uint>.Count;");
                        sourceWriter.WriteLine($"                            dp += Vector512<uint>.Count;");
                        sourceWriter.WriteLine($"                            count -= Vector512<uint>.Count;");
                        sourceWriter.WriteLine($"                        }}");
                        sourceWriter.WriteLine();
                        sourceWriter.WriteLine($"                        break;");
                    }
                }

                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                return ShiftRightLesserThan16Words(sp, dp, count, rightShiftCount);");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            [MethodImpl(MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("            static unsafe byte* OperateVectorByAvx2(uint* sp, uint* dp, int length, int rightShiftCount)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                Assert(Avx2.IsSupported == true);");
                sourceWriter.WriteLine("                Assert(length > 0);");
                sourceWriter.WriteLine("                Assert(rightShiftCount is >= 1 and <= 31);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                var leftShiftCount = _BIT_COUNT_PER_UINT32 - rightShiftCount;");
                sourceWriter.WriteLine("                var count = length - 1;");
                sourceWriter.WriteLine("                switch (rightShiftCount)");
                sourceWriter.WriteLine("                {");
                for (var rightShiftCount = 1; rightShiftCount <= 31; ++rightShiftCount)
                {
                    var leftShiftCount = 32 - rightShiftCount;
                    sourceWriter.WriteLine($"                    case {rightShiftCount}:");
                    if (rightShiftCount == 31)
                        sourceWriter.WriteLine("                    default:");
                    if (rightShiftCount == 8)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 1, byteLength - 1);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 1;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else if (rightShiftCount == 16)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 2, byteLength - 2);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 2;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else if (rightShiftCount == 24)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 3, byteLength - 3);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 3;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else
                    {
                        sourceWriter.WriteLine($"                        while (count >= Vector256<uint>.Count)");
                        sourceWriter.WriteLine($"                        {{");
                        sourceWriter.WriteLine($"                            var lowPart = Avx2.ShiftRightLogical(Avx.LoadVector256(sp), {rightShiftCount});");
                        sourceWriter.WriteLine($"                            var highPart = Avx2.ShiftLeftLogical(Avx.LoadVector256(sp + 1), {leftShiftCount});");
                        sourceWriter.WriteLine($"                            Avx.Store(dp, Avx2.Or(lowPart, highPart));");
                        sourceWriter.WriteLine($"                            sp += Vector256<uint>.Count;");
                        sourceWriter.WriteLine($"                            dp += Vector256<uint>.Count;");
                        sourceWriter.WriteLine($"                            count -= Vector256<uint>.Count;");
                        sourceWriter.WriteLine($"                        }}");
                        sourceWriter.WriteLine();
                        sourceWriter.WriteLine($"                        break;");
                    }
                }

                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                return ShiftRightLesserThan8Words(sp, dp, count, rightShiftCount);");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            [MethodImpl(MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("            static unsafe byte* OperateVectorBySse2(uint* sp, uint* dp, int length, int rightShiftCount)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                Assert(Sse2.IsSupported == true);");
                sourceWriter.WriteLine("                Assert(length > 0);");
                sourceWriter.WriteLine("                Assert(rightShiftCount is >= 1 and <= 31);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                var count = length - 1;");
                sourceWriter.WriteLine("                switch (rightShiftCount)");
                sourceWriter.WriteLine("                {");
                for (var rightShiftCount = 1; rightShiftCount <= 31; ++rightShiftCount)
                {
                    var leftShiftCount = 32 - rightShiftCount;
                    sourceWriter.WriteLine($"                    case {rightShiftCount}:");
                    if (rightShiftCount == 31)
                        sourceWriter.WriteLine("                    default:");
                    if (rightShiftCount == 8)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 1, byteLength - 1);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 1;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else if (rightShiftCount == 16)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 2, byteLength - 2);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 2;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else if (rightShiftCount == 24)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 3, byteLength - 3);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 3;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else
                    {
                        sourceWriter.WriteLine($"                        while (count >= Vector128<uint>.Count)");
                        sourceWriter.WriteLine($"                        {{");
                        sourceWriter.WriteLine($"                            var lowPart = Sse2.ShiftRightLogical(Sse2.LoadVector128(sp), {rightShiftCount});");
                        sourceWriter.WriteLine($"                            var highPart = Sse2.ShiftLeftLogical(Sse2.LoadVector128(sp + 1), {leftShiftCount});");
                        sourceWriter.WriteLine($"                            Sse2.Store(dp, Sse2.Or(lowPart, highPart));");
                        sourceWriter.WriteLine($"                            sp += Vector128<uint>.Count;");
                        sourceWriter.WriteLine($"                            dp += Vector128<uint>.Count;");
                        sourceWriter.WriteLine($"                            count -= Vector128<uint>.Count;");
                        sourceWriter.WriteLine($"                        }}");
                        sourceWriter.WriteLine();
                        sourceWriter.WriteLine($"                        break;");
                    }
                }

                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                return ShiftRightLesserThan4Words(sp, dp, count, rightShiftCount);");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            [MethodImpl(MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("            static unsafe byte* OperateVectorByAdvSimd(uint* sp, uint* dp, int length, int rightShiftCount)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                Assert(AdvSimd.IsSupported == true);");
                sourceWriter.WriteLine("                Assert(length > 0);");
                sourceWriter.WriteLine("                Assert(rightShiftCount is >= 1 and <= 31);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                var count = length - 1;");
                sourceWriter.WriteLine("                switch (rightShiftCount)");
                sourceWriter.WriteLine("                {");
                for (var rightShiftCount = 1; rightShiftCount <= 31; ++rightShiftCount)
                {
                    var leftShiftCount = 32 - rightShiftCount;
                    sourceWriter.WriteLine($"                    case {rightShiftCount}:");
                    if (rightShiftCount == 31)
                        sourceWriter.WriteLine("                    default:");
                    if (rightShiftCount == 8)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 1, byteLength - 1);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 1;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else if (rightShiftCount == 16)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 2, byteLength - 2);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 2;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else if (rightShiftCount == 24)
                    {
                        sourceWriter.WriteLine("                        {");
                        sourceWriter.WriteLine("                            var byteLength = unchecked((uint)length << 2);");
                        sourceWriter.WriteLine("                            Assert(byteLength == length * 4);");
                        sourceWriter.WriteLine("                            Unsafe.CopyBlockUnaligned((byte*)dp, (byte*)sp + 3, byteLength - 3);");
                        sourceWriter.WriteLine("                            return (byte*)dp + byteLength - 3;");
                        sourceWriter.WriteLine("                        }");
                    }
                    else
                    {
                        sourceWriter.WriteLine($"                        while (count >= Vector128<uint>.Count)");
                        sourceWriter.WriteLine($"                        {{");
                        sourceWriter.WriteLine($"                            var lowPart = AdvSimd.ShiftRightLogical(AdvSimd.LoadVector128(sp), {rightShiftCount});");
                        sourceWriter.WriteLine($"                            var highPart = AdvSimd.ShiftLeftLogical(AdvSimd.LoadVector128(sp + 1), {leftShiftCount});");
                        sourceWriter.WriteLine($"                            AdvSimd.Store(dp, AdvSimd.Or(lowPart, highPart));");
                        sourceWriter.WriteLine($"                            sp += Vector128<uint>.Count;");
                        sourceWriter.WriteLine($"                            dp += Vector128<uint>.Count;");
                        sourceWriter.WriteLine($"                            count -= Vector128<uint>.Count;");
                        sourceWriter.WriteLine($"                        }}");
                        sourceWriter.WriteLine();
                        sourceWriter.WriteLine($"                        break;");
                    }
                }

                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                return ShiftRightLesserThan4Words(sp, dp, count, rightShiftCount);");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("            static unsafe byte* OperateVectorByPackedSimd(uint* sp, uint* dp, int length, int rightShiftCount)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                Assert(PackedSimd.IsSupported == true);");
                sourceWriter.WriteLine("                Assert(length > 0);");
                sourceWriter.WriteLine("                Assert(rightShiftCount is >= 1 and <= 31);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                var leftShiftCount = _BIT_COUNT_PER_UINT32 - rightShiftCount;");
                sourceWriter.WriteLine("                var count = length - 1;");
                sourceWriter.WriteLine("                while (count >= Vector128<uint>.Count)");
                sourceWriter.WriteLine("                {");
                sourceWriter.WriteLine("                    var lowPart = PackedSimd.ShiftRightLogical(PackedSimd.LoadVector128(sp), rightShiftCount);");
                sourceWriter.WriteLine("                    var highPart = PackedSimd.ShiftLeft(PackedSimd.LoadVector128(sp + 1), leftShiftCount);");
                sourceWriter.WriteLine("                    PackedSimd.Store(dp, PackedSimd.Or(lowPart, highPart));");
                sourceWriter.WriteLine("                    sp += Vector128<uint>.Count;");
                sourceWriter.WriteLine("                    dp += Vector128<uint>.Count;");
                sourceWriter.WriteLine("                    count -= Vector128<uint>.Count;");
                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                return ShiftRightLesserThan4Words(sp, dp, count, rightShiftCount);");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            [MethodImpl(MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("            static unsafe byte* ShiftRightByDefault(uint* sp, uint* dp, int length, int rightShiftCount)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                Assert(length > 0);");
                sourceWriter.WriteLine("                Assert(rightShiftCount is >= 1 and <= 31);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                var leftShiftCount = _BIT_COUNT_PER_UINT32 - rightShiftCount;");
                sourceWriter.WriteLine("                var lowBits = *sp++ >> rightShiftCount;");
                sourceWriter.WriteLine("                var count = length - 1;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                while (count >= 32)");
                WriteInternalStatements(sourceWriter, 32);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count >= 16)");
                WriteInternalStatements(sourceWriter, 16);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count >= 8)");
                WriteInternalStatements(sourceWriter, 8);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count >= 4)");
                WriteInternalStatements(sourceWriter, 4);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count >= 2)");
                WriteInternalStatements(sourceWriter, 2);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count > 0)");
                sourceWriter.WriteLine("                {");
                sourceWriter.WriteLine("                    var nextBits = (ulong)*sp++ << leftShiftCount;");
                sourceWriter.WriteLine("                    *dp++ = lowBits | (uint)nextBits;");
                sourceWriter.WriteLine("                    lowBits = (uint)(nextBits >> _BIT_COUNT_PER_UINT32);");
                sourceWriter.WriteLine("                    --count;");
                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                *dp++ = lowBits;");
                sourceWriter.WriteLine("                return (byte*)dp;");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("            static unsafe byte* ShiftRightLesserThan16Words(uint* sp, uint* dp, int count, int rightShiftCount)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                Assert(count is >= 0 and < 16);");
                sourceWriter.WriteLine("                Assert(rightShiftCount is >= 1 and <= 31);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                var leftShiftCount = _BIT_COUNT_PER_UINT32 - rightShiftCount;");
                sourceWriter.WriteLine("                var lowBits = *sp++ >> rightShiftCount;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count >= 8)");
                WriteInternalStatements(sourceWriter, 8);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count >= 4)");
                WriteInternalStatements(sourceWriter, 4);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count >= 2)");
                WriteInternalStatements(sourceWriter, 2);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count > 0)");
                sourceWriter.WriteLine("                {");
                sourceWriter.WriteLine("                    var nextBits = (ulong)*sp++ << leftShiftCount;");
                sourceWriter.WriteLine("                    *dp++ = lowBits | (uint)nextBits;");
                sourceWriter.WriteLine("                    lowBits = (uint)(nextBits >> _BIT_COUNT_PER_UINT32);");
                sourceWriter.WriteLine("                    --count;");
                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                *dp++ = lowBits;");
                sourceWriter.WriteLine("                return (byte*)dp;");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("            static unsafe byte* ShiftRightLesserThan8Words(uint* sp, uint* dp, int count, int rightShiftCount)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                Assert(count is >= 0 and < 8);");
                sourceWriter.WriteLine("                Assert(rightShiftCount is >= 1 and <= 31);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                var leftShiftCount = _BIT_COUNT_PER_UINT32 - rightShiftCount;");
                sourceWriter.WriteLine("                var lowBits = *sp++ >> rightShiftCount;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count >= 4)");
                WriteInternalStatements(sourceWriter, 4);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count >= 2)");
                WriteInternalStatements(sourceWriter, 2);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count > 0)");
                sourceWriter.WriteLine("                {");
                sourceWriter.WriteLine("                    var nextBits = (ulong)*sp++ << leftShiftCount;");
                sourceWriter.WriteLine("                    *dp++ = lowBits | (uint)nextBits;");
                sourceWriter.WriteLine("                    lowBits = (uint)(nextBits >> _BIT_COUNT_PER_UINT32);");
                sourceWriter.WriteLine("                    --count;");
                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                *dp++ = lowBits;");
                sourceWriter.WriteLine("                return (byte*)dp;");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("            static unsafe byte* ShiftRightLesserThan4Words(uint* sp, uint* dp, int count, int rightShiftCount)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                Assert(count is >= 0 and < 4);");
                sourceWriter.WriteLine("                Assert(rightShiftCount is >= 1 and <= 31);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                var leftShiftCount = _BIT_COUNT_PER_UINT32 - rightShiftCount;");
                sourceWriter.WriteLine("                var lowBits = *sp++ >> rightShiftCount;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count >= 2)");
                WriteInternalStatements(sourceWriter, 2);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                if (count > 0)");
                sourceWriter.WriteLine("                {");
                sourceWriter.WriteLine("                    var nextBits = (ulong)*sp++ << leftShiftCount;");
                sourceWriter.WriteLine("                    *dp++ = lowBits | (uint)nextBits;");
                sourceWriter.WriteLine("                    lowBits = (uint)(nextBits >> _BIT_COUNT_PER_UINT32);");
                sourceWriter.WriteLine("                    --count;");
                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                *dp++ = lowBits;");
                sourceWriter.WriteLine("                return (byte*)dp;");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("            static unsafe void Finish(byte* end, uint* buffer, int bufferSize)");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                Assert(end <= (byte*)(buffer + bufferSize));");
                sourceWriter.WriteLine("                var remain = (byte*)(buffer + bufferSize) - end;");
                sourceWriter.WriteLine("                NativeMemory.Clear(end, (nuint)remain);");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine("        }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("        #endregion");

                static void WriteInternalStatements(TextWriter sourceWriter, int n)
                {
                    sourceWriter.WriteLine("                {");
                    for (var count = 0; count < n / 2; ++count)
                    {
                        sourceWriter.WriteLine($"                    {(count == 0 ? "var " : "")}nextBits1 = (ulong)sp[{2 * count + 0}] << leftShiftCount;");
                        sourceWriter.WriteLine($"                    dp[{2 * count + 0}] = {(count == 0 ? "lowBits" : "(uint)(nextBits2 >> _BIT_COUNT_PER_UINT32)")} | (uint)nextBits1;");
                        sourceWriter.WriteLine($"                    {(count == 0 ? "var " : "")}nextBits2 = (ulong)sp[{2 * count + 1}] << leftShiftCount;");
                        sourceWriter.WriteLine($"                    dp[{2 * count + 1}] = (uint)(nextBits1 >> _BIT_COUNT_PER_UINT32) | (uint)nextBits2;");
                    }

                    sourceWriter.WriteLine($"                    lowBits = (uint)(nextBits2 >> _BIT_COUNT_PER_UINT32);");
                    sourceWriter.WriteLine($"                    dp += {n};");
                    sourceWriter.WriteLine($"                    sp += {n};");
                    sourceWriter.WriteLine($"                    count -= {n};");
                    sourceWriter.WriteLine($"                }}");
                }
            }

            static void WriteSubtractSelfTry1(TextWriter sourceWriter)
            {
                sourceWriter.WriteLine("        #region SubtractSelfTry1");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("        private static void SubtractSelfTry1(Span<uint> left, ReadOnlySpan<uint> right)");
                sourceWriter.WriteLine("        {");
                sourceWriter.WriteLine("            Assert(left.Length > 0);");
                sourceWriter.WriteLine("            Assert(right.Length > 0);");
                sourceWriter.WriteLine("            Assert(left.Length >= right.Length);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            var borrow = 0L;");
                sourceWriter.WriteLine("            var index = 0;");
                sourceWriter.WriteLine("            var count = right.Length;");
                sourceWriter.WriteLine("            while (count >= 32)");
                WriteInternalStatements1(sourceWriter, 32);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (count >= 16)");
                WriteInternalStatements1(sourceWriter, 16);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (count >= 8)");
                WriteInternalStatements1(sourceWriter, 8);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (count >= 4)");
                WriteInternalStatements1(sourceWriter, 4);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (count >= 2)");
                WriteInternalStatements1(sourceWriter, 2);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (count > 0)");
                WriteInternalStatements1(sourceWriter, 1);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            Assert(count == 0);");
                sourceWriter.WriteLine("            Assert(index == right.Length);");
                sourceWriter.WriteLine("            Assert(borrow is 0 or (-1));");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (borrow == 0)");
                sourceWriter.WriteLine("                return;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            Assert(left.Length > right.Length);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            count = left.Length - right.Length;");
                sourceWriter.WriteLine("            while (count >= 32)");
                WriteInternalStatements2(sourceWriter, 32);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (count >= 16)");
                WriteInternalStatements2(sourceWriter, 16);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (count >= 8)");
                WriteInternalStatements2(sourceWriter, 8);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (count >= 4)");
                WriteInternalStatements2(sourceWriter, 4);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (count >= 2)");
                WriteInternalStatements2(sourceWriter, 2);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            if (count > 0)");
                WriteInternalStatements2(sourceWriter, 1);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            Assert(count == 0);");
                sourceWriter.WriteLine("            Assert(index == left.Length);");
                sourceWriter.WriteLine("            Assert(borrow == 0);");
                sourceWriter.WriteLine("        }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("        #endregion");

                static void WriteInternalStatements1(TextWriter sourceWriter, int n)
                {
                    sourceWriter.WriteLine($"            {{");
                    for (var count = 0; count < n; ++count)
                    {
                        sourceWriter.WriteLine($"                borrow += (long)left[index + {count}] - right[index + {count}];");
                        sourceWriter.WriteLine($"                left[index + {count}] = unchecked((uint)borrow);");
                        sourceWriter.WriteLine($"                borrow >>= _BIT_COUNT_PER_UINT32;");
                        sourceWriter.WriteLine($"                Assert(borrow is 0 or (-1));");
                    }

                    sourceWriter.WriteLine($"                index += {n};");
                    sourceWriter.WriteLine($"                count -= {n};");
                    sourceWriter.WriteLine($"            }}");
                }

                static void WriteInternalStatements2(TextWriter sourceWriter, int n)
                {
                    sourceWriter.WriteLine($"            {{");
                    for (var count = 0; count < n; ++count)
                    {
                        sourceWriter.WriteLine($"                borrow += left[index + {count}];");
                        sourceWriter.WriteLine($"                left[index + {count}] = unchecked((uint)borrow);");
                        sourceWriter.WriteLine($"                borrow >>= _BIT_COUNT_PER_UINT32;");
                        sourceWriter.WriteLine($"                Assert(borrow is 0 or (-1));");
                        sourceWriter.WriteLine($"                if (borrow == 0)");
                        sourceWriter.WriteLine($"                    return;");
                    }

                    sourceWriter.WriteLine($"                index += {n};");
                    sourceWriter.WriteLine($"                count -= {n};");
                    sourceWriter.WriteLine($"            }}");
                }
            }

            static void WriteSubtractSelfTry2(TextWriter sourceWriter)
            {
                sourceWriter.WriteLine("        #region SubtractSelfTry2");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine("        private static void SubtractSelfTry2(Span<uint> left, ReadOnlySpan<uint> right)");
                sourceWriter.WriteLine("        {");
                sourceWriter.WriteLine("            Assert(left.Length > 0);");
                sourceWriter.WriteLine("            Assert(right.Length > 0);");
                sourceWriter.WriteLine("            Assert(left.Length >= right.Length);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("            unsafe");
                sourceWriter.WriteLine("            {");
                sourceWriter.WriteLine("                fixed (uint* leftBuffer = left)");
                sourceWriter.WriteLine("                fixed (uint* rightBuffer = right)");
                sourceWriter.WriteLine("                {");
                sourceWriter.WriteLine("                    var lp = leftBuffer;");
                sourceWriter.WriteLine("                    var rp = rightBuffer;");
                sourceWriter.WriteLine("                    var count = right.Length;");
                sourceWriter.WriteLine("                    var borrow = 0L;");
                sourceWriter.WriteLine("                    while (count >= 32)");
                WriteInternalStatements1(sourceWriter, 32);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (count >= 16)");
                WriteInternalStatements1(sourceWriter, 16);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (count >= 8)");
                WriteInternalStatements1(sourceWriter, 8);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (count >= 4)");
                WriteInternalStatements1(sourceWriter, 4);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (count >= 2)");
                WriteInternalStatements1(sourceWriter, 2);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (count > 0)");
                WriteInternalStatements1(sourceWriter, 1);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    Assert(lp == &leftBuffer[right.Length]);");
                sourceWriter.WriteLine("                    Assert(rp == &rightBuffer[right.Length]);");
                sourceWriter.WriteLine("                    Assert(count == 0);");
                sourceWriter.WriteLine("                    Assert(borrow is 0 or (-1));");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (borrow == 0)");
                sourceWriter.WriteLine("                        return;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    Assert(left.Length > right.Length);");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    count = left.Length - right.Length;");
                sourceWriter.WriteLine("                    while (count >= 32)");
                WriteInternalStatements2(sourceWriter, 32);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (count >= 16)");
                WriteInternalStatements2(sourceWriter, 16);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (count >= 8)");
                WriteInternalStatements2(sourceWriter, 8);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (count >= 4)");
                WriteInternalStatements2(sourceWriter, 4);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (count >= 2)");
                WriteInternalStatements2(sourceWriter, 2);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    if (count > 0)");
                WriteInternalStatements2(sourceWriter, 1);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("                    Assert(lp == &leftBuffer[left.Length]);");
                sourceWriter.WriteLine("                    Assert(count == 0);");
                sourceWriter.WriteLine("                    Assert(borrow == 0);");
                sourceWriter.WriteLine("                }");
                sourceWriter.WriteLine("            }");
                sourceWriter.WriteLine("        }");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("        #endregion");

                static void WriteInternalStatements1(TextWriter sourceWriter, int n)
                {
                    sourceWriter.WriteLine($"                    {{");
                    for (var count = 0; count < n; ++count)
                    {
                        sourceWriter.WriteLine($"                        borrow += (long)lp[{count}] - rp[{count}];");
                        sourceWriter.WriteLine($"                        lp[{count}] = unchecked((uint)borrow);");
                        sourceWriter.WriteLine($"                        borrow >>= _BIT_COUNT_PER_UINT32;");
                        sourceWriter.WriteLine($"                        Assert(borrow is 0 or (-1));");
                    }

                    sourceWriter.WriteLine($"                        lp += {n};");
                    sourceWriter.WriteLine($"                        rp += {n};");
                    sourceWriter.WriteLine($"                        count -= {n};");
                    sourceWriter.WriteLine($"                    }}");
                }

                static void WriteInternalStatements2(TextWriter sourceWriter, int n)
                {
                    sourceWriter.WriteLine($"                    {{");
                    for (var count = 0; count < n; ++count)
                    {
                        sourceWriter.WriteLine($"                        borrow += lp[{count}];");
                        sourceWriter.WriteLine($"                        lp[{count}] = unchecked((uint)borrow);");
                        sourceWriter.WriteLine($"                        borrow >>= _BIT_COUNT_PER_UINT32;");
                        sourceWriter.WriteLine($"                        Assert(borrow is 0 or (-1));");
                        sourceWriter.WriteLine($"                        if (borrow == 0)");
                        sourceWriter.WriteLine($"                            return;");
                    }

                    sourceWriter.WriteLine($"                        lp += {n};");
                    sourceWriter.WriteLine($"                        count -= {n};");
                    sourceWriter.WriteLine($"                    }}");
                }
            }
        }

        private static void GenerateBenchmarkOfGcd(string coreProjectPath)
        {
            var outputPath = Path.Combine(coreProjectPath, "BenchmarkOfGcd.AutoGenerated.cs");
            if (File.Exists(outputPath))
            {
                var outputFileAttribute = File.GetAttributes(outputPath);
                File.SetAttributes(outputPath, outputFileAttribute & ~FileAttributes.ReadOnly);
            }

            try
            {
                using var sourceWriter = new StreamWriter(outputPath, false, Encoding.UTF8);
                sourceWriter.WriteLine("using System;");
                sourceWriter.WriteLine("using System.Numerics;");
                sourceWriter.WriteLine("using System.Runtime.CompilerServices;");
                sourceWriter.WriteLine("using BenchmarkDotNet.Attributes;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("namespace Experiment.CUI");
                sourceWriter.WriteLine("{");
                sourceWriter.WriteLine("    public partial class BenchmarkOfGcd");
                sourceWriter.WriteLine("    {");
                var isFirstItem = true;
                var implements =
                    new[]
                    {
                        (name: "BigInteger", className: "BigIntegerCalculator"),
                        (name: "Modified_Ver2_0", className: "BigIntegerCalculatorVer2"),
                        (name: "Modified_Ver2_1", className: "BigIntegerCalculatorVer2_1"),
                    };
                var bitSizes = new[] { 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 };
                foreach (var (name, className) in implements)
                {
                    foreach (var bitSize in bitSizes)
                    {
                        if (!isFirstItem)
                            sourceWriter.WriteLine();
                        isFirstItem = false;
                        if (bitSize <= 32)
                        {
                            sourceWriter.WriteLine($"        [Benchmark]");
                            sourceWriter.WriteLine($"        [BenchmarkCategory(\"{bitSize:D4}bit\")]");
                            sourceWriter.WriteLine($"        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]");
                            sourceWriter.WriteLine($"        public void Gcd_{bitSize:D4}bit_{name}()");
                            sourceWriter.WriteLine($"        {{");
                            sourceWriter.WriteLine($"            var dataSet = _{bitSize:D4}bitData;");
                            sourceWriter.WriteLine($"            for (var index1 = 0; index1 < dataSet.Length - 1; ++index1)");
                            sourceWriter.WriteLine($"            {{");
                            sourceWriter.WriteLine($"                for (var index2 = index1 + 1; index2 < dataSet.Length; ++index2)");
                            sourceWriter.WriteLine($"                {{");
                            sourceWriter.WriteLine($"                    var left = dataSet[index1];");
                            sourceWriter.WriteLine($"                    var right = dataSet[index2];");
                            sourceWriter.WriteLine($"                    _ = {className}.Gcd(left, right);");
                            sourceWriter.WriteLine($"                }}");
                            sourceWriter.WriteLine($"            }}");
                            sourceWriter.WriteLine($"        }}");
                        }
                        else
                        {
                            sourceWriter.WriteLine($"        [Benchmark]");
                            sourceWriter.WriteLine($"        [BenchmarkCategory(\"{bitSize:D4}bit\")]");
                            sourceWriter.WriteLine($"        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]");
                            sourceWriter.WriteLine($"        public void Gcd_{bitSize:D4}bit_{name}()");
                            sourceWriter.WriteLine($"        {{");
                            sourceWriter.WriteLine($"            var dataSet = _{bitSize:D4}bitData;");
                            sourceWriter.WriteLine($"            Span<uint> result = stackalloc uint[{bitSize / 8 / sizeof(uint)}];");
                            sourceWriter.WriteLine($"            for (var index1 = 0; index1 < dataSet.Length - 1; ++index1)");
                            sourceWriter.WriteLine($"            {{");
                            sourceWriter.WriteLine($"                for (var index2 = index1 + 1; index2 < dataSet.Length; ++index2)");
                            sourceWriter.WriteLine($"                {{");
                            sourceWriter.WriteLine($"                    var left = dataSet[index1].Span;");
                            sourceWriter.WriteLine($"                    var right = dataSet[index2].Span;");
                            sourceWriter.WriteLine($"                    {className}.Gcd(left, right, result);");
                            sourceWriter.WriteLine($"                }}");
                            sourceWriter.WriteLine($"            }}");
                            sourceWriter.WriteLine($"        }}");
                        }
                    }
                }

                sourceWriter.WriteLine("    }");
                sourceWriter.WriteLine("}");
            }
            finally
            {
                var outputFileAttribute = File.GetAttributes(outputPath);
                File.SetAttributes(outputPath, outputFileAttribute | FileAttributes.ReadOnly);
            }
        }

        private static void GenerateBenchmarkOfShiftRight(string coreProjectPath)
        {
            var outputPath = Path.Combine(coreProjectPath, "BenchmarkOfShiftRight.AutoGenerated.cs");
            if (File.Exists(outputPath))
            {
                var outputFileAttribute = File.GetAttributes(outputPath);
                File.SetAttributes(outputPath, outputFileAttribute & ~FileAttributes.ReadOnly);
            }

            try
            {
                using var sourceWriter = new StreamWriter(outputPath, false, Encoding.UTF8);
                sourceWriter.WriteLine("using System;");
                sourceWriter.WriteLine("using System.Runtime.CompilerServices;");
                sourceWriter.WriteLine("using BenchmarkDotNet.Attributes;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("namespace Experiment.CUI");
                sourceWriter.WriteLine("{");
                sourceWriter.WriteLine("    public partial class BenchmarkOfShiftRight");
                sourceWriter.WriteLine("    {");
                var isFirstItem = true;
                var tryNumbers = Enumerable.Range(0, 7).ToArray();
                var bitSizes = new[] { 64, 96, 128, 160, 192, 224, 256, 512, 1024, 2048, 4096 };
                foreach (var tryNumber in tryNumbers)
                {
                    foreach (var bitSize in bitSizes)
                    {
                        if (!isFirstItem)
                            sourceWriter.WriteLine();
                        isFirstItem = false;
                        sourceWriter.WriteLine($"        [Benchmark]");
                        sourceWriter.WriteLine($"        [BenchmarkCategory(\"{bitSize:D4}bit\")]");
                        sourceWriter.WriteLine($"        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]");
                        sourceWriter.WriteLine($"        public void ShiftRight_{bitSize:D4}bit_Try{tryNumber:D1}()");
                        sourceWriter.WriteLine($"        {{");
                        sourceWriter.WriteLine($"            Span<uint> buffer = stackalloc uint[{bitSize / 8 / sizeof(uint)}];");
                        sourceWriter.WriteLine($"            var bitCount = 3;");
                        sourceWriter.WriteLine($"            BigIntegerCalculatorVer2_1.TryToShiftRight({tryNumber}, buffer, bitCount);");
                        sourceWriter.WriteLine($"        }}");
                    }
                }

                sourceWriter.WriteLine("    }");
                sourceWriter.WriteLine("}");
            }
            finally
            {
                var outputFileAttribute = File.GetAttributes(outputPath);
                File.SetAttributes(outputPath, outputFileAttribute | FileAttributes.ReadOnly);
            }
        }
    }
}

